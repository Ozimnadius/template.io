//@prepros-append pages/common.js
//@prepros-append pages/index.js
// common.js
function getNumber(str) {
    return parseInt(str.replace(/\s/g, ''));
}

function number_format(number, decimals, dec_point, thousands_sep) {
    var i, j, kw, kd, km;
    if (isNaN(decimals = Math.abs(decimals))) {
        decimals = 2;
    }
    if (dec_point == undefined) {
        dec_point = ",";
    }
    if (thousands_sep == undefined) {
        thousands_sep = ".";
    }
    i = parseInt(number = (+number || 0).toFixed(decimals)) + "";
    if ((j = i.length) > 3) {
        j = j % 3;
    } else {
        j = 0;
    }
    km = (j ? i.substr(0, j) + thousands_sep : "");
    kw = i.substr(j).replace(/(\d{3})(?=\d)/g, "$1" + thousands_sep);
    kd = (decimals ? dec_point + Math.abs(number - i).toFixed(decimals).replace(/-/, 0).slice(2) : "");
    return km + kw + kd;
}

function imageResize(src) {
    $('img').not('.logo__img').attr('src', src);
}

// imageResize('https://loremflickr.com/320/440');

const wWidth = $(window).width();

// $.validator.methods.tel = function (value, element) {
//     let re = new RegExp(/\d/g),
//         str = value.match(re);
//
//     if (str.length == 11) {
//         return true;
//     } else {
//         return false;
//     }
// };

$('input[type=tel]').mask('+7 (999) 999-99-99');

function AdaptiveMenu(menu) {
    this.menu = menu;
    this.items = this.menu.find('.menu__item');
    this.list = this.menu.find('.menu__list');
    this.more = this.menu.find('.menu__more');
    this.menuWidth = parseInt(this.menu.outerWidth());
    this.listWidth = parseInt(this.list.outerWidth());
    this.moreWidth = parseInt(this.more.outerWidth());
    this.moreList = this.more.find('.mmore__list');
    this.width = this.listWidth + this.moreWidth;
    this.cutItems = [];
    this.lastItem = this.cutItems[this.cutItems.length - 1];

    let that = this;

    $(window).resize(function () {
        that.update();
        that.compareWidth();
    });

    this.init = function () {
        that.compareWidth();
    };

    this.compareWidth = function () {

        if (that.menu.hasClass('cut')) {
            that.compareCutted();
        } else {
            that.compareNonCutted();
        }

    };

    this.compareNonCutted = function () {
        if (that.listWidth > that.menuWidth) {
            that.menu.addClass('cut');
            that.removeLastItem();
            that.update();
            that.addItemToMore();
            that.compareCutted();
        }
    };

    this.compareCutted = function () {
        that.list.addClass('nogrow');

        if (that.width > that.menuWidth) {
            while (that.width > that.menuWidth) {
                that.removeLastItem();
                that.update();
                that.addItemToMore();
            }
        } else {
            while (that.lastItem.width + that.listWidth <= that.menuWidth) {
                that.addLastItem();
                that.removeItemFromMore();
                that.update();
                if (!that.lastItem) {
                    that.menu.removeClass('cut');
                    break;
                }
            }
        }

        that.list.removeClass('nogrow');
    };

    this.removeLastItem = function () {
        let item = $(that.items[that.items.length - 1]),
            link = item.find('.menu__link');

        that.cutItems.push({
            width: parseInt(item.outerWidth()),
            item: item,
            href: link.attr('href'),
            title: link.text()
        });
        item.detach();
    };

    this.addLastItem = function () {
        let item = that.lastItem.item;
        that.list.append(item);
        that.cutItems.pop();
    };

    this.addItemToMore = function () {
        let item = that.lastItem,
            link = $('<a>').addClass('mmore__item').attr('href',item.href).text(item.title);

        that.moreList.append(link);
    };

    this.removeItemFromMore = function () {
        let item = that.lastItem;
        that.moreList.find('a[href="'+item.href+'"]').remove();
    };

    this.update = function () {
        that.list.addClass('nogrow');
        that.items = that.menu.find('.menu__item');
        // that.list = that.menu.find('.menu__list');
        // that.more = that.menu.find('.menu__more');
        // that.moreList = that.more.find('.mmore__list');
        that.menuWidth = parseInt(that.menu.outerWidth());
        that.listWidth = parseInt(that.list.outerWidth());
        that.moreWidth = parseInt(that.more.outerWidth());
        that.width = that.listWidth + that.moreWidth;
        that.lastItem = that.cutItems[that.cutItems.length - 1];
        that.list.removeClass('nogrow');
    }

}




//index.js
$(function () {

    const ibanner = document.querySelector('.ibanner__slider');
    if (ibanner) {
        let ibannerSlider = new Swiper('.ibanner__container', {
            slidesPerView: 1,
            effect: 'slide',
            loop: true,
            watchOverflow: true,
            // Navigation arrows
            navigation: {
                nextEl: '.ibanner__next-btn',
                prevEl: '.ibanner__prev-btn',
            },
            // If we need pagination
            pagination: {
                el: '.ibanner__pag',
                clickable: true
            },

            on: {
                init: function () {
                    initParams(this, ibanner);
                },
            },
        });
    }

    const iprojects = document.querySelector('.iprojects__slider');
    if (iprojects) {
        let iprojectsSlider = new Swiper('.iprojects__container', {
            slidesPerView: 'auto',
            effect: 'slide',
            spaceBetween: 20,
            loop: true,
            // If we need pagination
            pagination: {
                el: '.iprojects__pag .pag',
                clickable: true
            },
            on: {
                init: function () {
                    initParams(this, iprojects);
                },

            }
        });
    }

    const irecom = $('.irecom__slider');
    if (irecom.length > 0) {
        let irecomSliders = {};

        irecom.each(function (x, i) {
            let slider = i;

            irecomSliders['iprojectsSlider' + x] = new Swiper('.irecom__container-' + x, {
                slidesPerView: 4,
                effect: 'slide',
                spaceBetween: 20,
                loop: true,
                watchOverflow: true,
                // Navigation arrows
                navigation: {
                    nextEl: '.irecom__next-' + x,
                    prevEl: '.irecom__prev-' + x,
                },
                // If we need pagination
                pagination: {
                    el: '.irecom__pag-' + x + ' .pag',
                    clickable: true
                },
                on: {
                    init: function () {
                        initParams(this, slider);
                    },
                }
            });

        });


    }

    const iactions = document.querySelector('.iactions__slider');
    if (iprojects) {
        let iprojectsSlider = new Swiper('.iactions__container', {
            slidesPerView: 4,
            effect: 'slide',
            spaceBetween: 20,
            loop: true,
            watchOverflow: true,
            // If we need pagination
            pagination: {
                el: '.iactions__pag .pag',
                clickable: true
            },
            // Navigation arrows
            navigation: {
                nextEl: '.iactions__next',
                prevEl: '.iactions__prev',
            },
            on: {
                init: function () {
                    initParams(this, iprojects);
                },
            }
        });
    }

    const irevs = document.querySelector('.irevs__slider');
    if (iprojects) {
        let iprojectsSlider = new Swiper('.irevs__container', {
            slidesPerView: 3,
            effect: 'slide',
            spaceBetween: 20,
            loop: true,
            watchOverflow: true,
            // If we need pagination
            pagination: {
                el: '.irevs__pag .pag',
                clickable: true
            },
            // Navigation arrows
            navigation: {
                nextEl: '.irevs__next',
                prevEl: '.irevs__prev',
            },
            on: {
                init: function () {
                    initParams(this, irevs);
                },
            }
        });
    }

    const ibrands = document.querySelector('.ibrands__slider');
    if (iprojects) {
        let iprojectsSlider = new Swiper('.ibrands__container', {
            slidesPerView: 5,
            effect: 'slide',
            spaceBetween: 20,
            loop: true,
            watchOverflow: true,
            // If we need pagination
            pagination: {
                el: '.ibrands__pag .pag',
                clickable: true
            },
            // Navigation arrows
            navigation: {
                nextEl: '.ibrands__next',
                prevEl: '.ibrands__prev',
            },
            on: {
                init: function () {
                    initParams(this, ibrands);
                },
            }
        });
    }


    function initParams(item, slider) {

        let params = item.params,
            data = slider.dataset,
            speed = parseInt(data.speed) || 300,
            autoplay = (data.autoplay == 'true'),
            delay = parseInt(data.autoplayDelay) || 5000,
            pagination = (data.pagination == 'true');

        params.speed = speed;

        if (autoplay) {
            params.autoplay.enabled = autoplay;
            params.autoplay.delay = delay;
        }


        if (!pagination) {
            params.pagination = {};
        }
    }

    let $menus = $('.menu'),
        menusObj = {};

    $menus.each(function (x, i) {
        let menu = $(i);
        menusObj['menu' + x] = new AdaptiveMenu(menu);
        menusObj['menu' + x].init();
    });

    const headerFixed = $('.fixmenu'),
        headerMain = $('.header');

    $(window).on('scroll', function (e) {
        let height = headerMain.outerHeight(),
            scrollTop = $(this).scrollTop();

        if (scrollTop> height){
            headerFixed.addClass('active');
        } else {
            headerFixed.removeClass('active');
        }

    });

});

//# sourceMappingURL=main.min.js.map